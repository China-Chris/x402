import { ethers } from "hardhat";
import * as fs from "fs";
import * as path from "path";

async function main() {
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
  console.log("üöÄ HashKey Chain - EIP-3009 USDC ÈÉ®ÁΩ≤");
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

  // Ëé∑ÂèñÈÉ®ÁΩ≤Ë¥¶Êà∑
  const [deployer] = await ethers.getSigners();
  const network = await ethers.provider.getNetwork();

  console.log("üìã ÁΩëÁªú‰ø°ÊÅØ:");
  console.log("  ÁΩëÁªúÂêçÁß∞:", network.name);
  console.log("  Chain ID:", network.chainId.toString());
  console.log("  ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);

  // Ê£ÄÊü•‰ΩôÈ¢ù
  const balance = await ethers.provider.getBalance(deployer.address);
  console.log("  Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.formatEther(balance), "HSK");

  if (balance === 0n) {
    console.error("\n‚ùå ÈîôËØØ: Ë¥¶Êà∑‰ΩôÈ¢ù‰∏∫ 0");
    console.error("ËØ∑ÂÖàËé∑ÂèñÊµãËØï HSK ‰ª£Â∏Å");
    process.exit(1);
  }

  // ‰ª£Â∏ÅÂèÇÊï∞
  const TOKEN_NAME = process.env.TOKEN_NAME || "USD Coin";
  const TOKEN_SYMBOL = process.env.TOKEN_SYMBOL || "USDC";
  const TOKEN_DECIMALS = 6;
  const INITIAL_SUPPLY = process.env.INITIAL_SUPPLY || "1000000";

  console.log("\nüíµ ‰ª£Â∏ÅÂèÇÊï∞:");
  console.log("  ÂêçÁß∞:", TOKEN_NAME);
  console.log("  Á¨¶Âè∑:", TOKEN_SYMBOL);
  console.log("  Á≤æÂ∫¶:", TOKEN_DECIMALS);
  console.log("  ÂàùÂßã‰æõÂ∫î:", INITIAL_SUPPLY, TOKEN_SYMBOL);

  // ÈÉ®ÁΩ≤ÂêàÁ∫¶
  console.log("\n‚è≥ Ê≠£Âú®ÈÉ®ÁΩ≤ÂêàÁ∫¶...");
  const EIP3009USDC = await ethers.getContractFactory("EIP3009USDC");
  const usdc = await EIP3009USDC.deploy(
    TOKEN_NAME,
    TOKEN_SYMBOL,
    TOKEN_DECIMALS,
    INITIAL_SUPPLY
  );

  console.log("üì§ ÈÉ®ÁΩ≤‰∫§ÊòìÂ∑≤ÂèëÈÄÅ");
  console.log("‚è≥ Á≠âÂæÖÁ°ÆËÆ§...");

  await usdc.waitForDeployment();
  const usdcAddress = await usdc.getAddress();

  console.log("\n‚úÖ ÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü!");
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
  console.log("üìç ÂêàÁ∫¶Âú∞ÂùÄ:", usdcAddress);
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");

  // È™åËØÅÂêàÁ∫¶‰ø°ÊÅØ
  console.log("\nüîç È™åËØÅÂêàÁ∫¶‰ø°ÊÅØ...");
  const name = await usdc.name();
  const symbol = await usdc.symbol();
  const decimals = await usdc.decimals();
  const totalSupply = await usdc.totalSupply();
  const domainSeparator = await usdc.DOMAIN_SEPARATOR();
  const owner = await usdc.owner();

  console.log("  ÂêçÁß∞:", name);
  console.log("  Á¨¶Âè∑:", symbol);
  console.log("  Á≤æÂ∫¶:", decimals);
  console.log("  ÊÄª‰æõÂ∫î:", ethers.formatUnits(totalSupply, decimals), symbol);
  console.log("  ÊâÄÊúâËÄÖ:", owner);
  console.log("  Domain Separator:", domainSeparator);

  // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
  const deploymentInfo = {
    network: network.name,
    chainId: network.chainId.toString(),
    contractAddress: usdcAddress,
    deployer: deployer.address,
    tokenName: name,
    tokenSymbol: symbol,
    decimals: Number(decimals),
    initialSupply: ethers.formatUnits(totalSupply, decimals),
    domainSeparator: domainSeparator,
    deploymentTime: new Date().toISOString(),
    blockExplorer: `https://testnet.hashkeyscan.io/address/${usdcAddress}`,
  };

  const deploymentPath = path.join(__dirname, "..", "deployment.json");
  fs.writeFileSync(deploymentPath, JSON.stringify(deploymentInfo, null, 2));
  console.log("\nüíæ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞:", deploymentPath);

  // Êõ¥Êñ∞ .env Êñá‰ª∂
  const envPath = path.join(__dirname, "..", ".env");
  if (fs.existsSync(envPath)) {
    let envContent = fs.readFileSync(envPath, "utf8");
    if (envContent.includes("USDC_ADDRESS=")) {
      envContent = envContent.replace(/USDC_ADDRESS=.*/, `USDC_ADDRESS=${usdcAddress}`);
    } else {
      envContent += `\nUSDC_ADDRESS=${usdcAddress}\n`;
    }
    fs.writeFileSync(envPath, envContent);
    console.log("‚úÖ .env Êñá‰ª∂Â∑≤Êõ¥Êñ∞");
  }

  console.log("\n" + "‚îÅ".repeat(80));
  console.log("üéâ ÈÉ®ÁΩ≤ÂÆåÊàê!");
  console.log("‚îÅ".repeat(80));

  console.log("\nüìù ‰∏ã‰∏ÄÊ≠•:");
  console.log("1Ô∏è‚É£  Êü•ÁúãÂêàÁ∫¶:");
  console.log(`   ${deploymentInfo.blockExplorer}`);

  console.log("\n2Ô∏è‚É£  ÊµãËØïÂêàÁ∫¶:");
  console.log(`   export USDC_ADDRESS=${usdcAddress}`);
  console.log("   npm run test");

  console.log("\n3Ô∏è‚É£  Èì∏ÈÄ†ÊµãËØï‰ª£Â∏Å:");
  console.log("   npm run mint");

  console.log("\n4Ô∏è‚É£  ÈÖçÁΩÆ x402:");
  console.log("   Â∞Ü‰ª•‰∏ã‰ø°ÊÅØÊ∑ªÂä†Âà∞ x402 ÈÖçÁΩÆÊñá‰ª∂:");
  console.log(`   
   // python/x402/src/x402/chains.py
   "133": [{
     "human_name": "usdc",
     "address": "${usdcAddress}",
     "decimals": 6,
     "name": "USDC",
     "version": "2",
   }]
   `);

  console.log("\n5Ô∏è‚É£  È™åËØÅÂêàÁ∫¶ÔºàÂèØÈÄâÔºâ:");
  console.log(`   npx hardhat verify --network hashkey-testnet ${usdcAddress} "${TOKEN_NAME}" "${TOKEN_SYMBOL}" ${TOKEN_DECIMALS} ${INITIAL_SUPPLY}`);

  console.log("\n" + "‚îÅ".repeat(80));
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
    process.exit(1);
  });


